{{///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PWM2C H-Bridge Engine//// Author: Kwabena W. Agyeman// Updated: 8/20/2010// Designed For: P8X32A// Version: 1.1//// Copyright (c) 2010 Kwabena W. Agyeman// See end of file for terms of use.//// Update History://// v1.0 - Original release - 9/5/2009.// v1.1 - Added support for variable pin assignments and increased duty cycle resolution - 8/20/2010.//// For each included copy of this object only one spin interpreter should access it at a time.//// Nyamekye,//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// H-Bridge Circuit://// Left Forward Pin Number   --- To H-Bridge Direction Control. Active high.//// Left Backward Pin Number  --- To H-Bridge Direction Control. Active high.//// Right Forward Pin Number  --- To H-Bridge Direction Control. Active high.//// Right Backward Pin Number --- To H-Bridge Direction Control. Active high.///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}}VAR  long leftChannelDuty, rightChannelDuty, pinMasks, cogNumber, frequencyNumber, stack[6]  byte directionLeft[2], directionRight[2]PUB leftDuty(dutyCycle) '' 4 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Changes the PWM duty cycle on either the forward or backward pin for the left channel. 0% duty cycle breaks.'' //'' // DutyCycle - The desired duty cycle. 1000% outputs a full high forward, -1000% outputs a full high backward.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  leftChannelDuty := ((dutyCycle <# 1_000) #> -1_000)PUB rightDuty(dutyCycle) '' 4 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Changes the PWM duty cycle on either the forward or backward pin for the right channel. 0% duty cycle breaks.'' //'' // DutyCycle - The desired duty cycle. 1000% outputs a full high forward, -1000% outputs a full high backward.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  rightChannelDuty := ((dutyCycle <# 1_000) #> -1_000)PUB HBDEngineStart(leftForward, leftBackward, rightForward, rightBackward, cycleFrequency) '' 11 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Starts up the HBD driver running on a cog.'' //'' // Returns true on success and false on failure.'' //'' // leftForward  - Forward pin for left channel H - Bridge control. Between (0 - 31). -1 to disable.'' // leftBackward - Backward pin for left channel H - Bridge control. Between (0 - 31). -1 to disable.'' // rightForward  - Forward pin for right channel H - Bridge control. Between (0 - 31). -1 to disable.'' // rightBackward - Backward pin for right channel H - Bridge control. Between (0 - 31). -1 to disable.'' // cycleFrequency - The PWM frequency to drive the H-Bridge at. Between 1 Hz and 8000 Hz @ 80Mhz.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  HBDEngineStop  if(chipver == 1)    directionLeft := ((leftForward <# 31) #> 0)    directionLeft[1] := ((leftBackward <# 31) #> 0)    directionRight := ((rightForward <# 31) #> 0)    directionRight[1] := ((rightBackward <# 31) #> 0)    pinMasks := ( ((|<directionLeft) & (leftForward <> -1)) | ((|<directionLeft[1]) & (leftBackward <> -1)) | {                } ((|<directionRight) & (rightForward <> -1)) | ((|<directionRight[1]) & (rightBackward <> -1)) )    frequencyNumber := (clkfreq / ((cycleFrequency <# (clkfreq / constant(80_000_000 / 8_000))) #> 1))    cogNumber := cognew(HBDDriver, @stack)    result or= ++cogNumberPUB HBDEngineStop '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Shuts down the HBD driver running on a cog.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  if(cogNumber)    cogstop(-1 + cogNumber~)PRI HBDDriver ' 6 Stack Longs  dira := pinMasks  frqa := 1  frqb := 1  result := cnt  repeat    result += frequencyNumber    waitcnt(result)    phsa := -((||leftChannelDuty) * (frequencyNumber / 1_000))    phsb := -((||rightChannelDuty) * (frequencyNumber / 1_000))    ctra := (constant(%0_0100 << 26) | directionLeft[-(leftChannelDuty < 0)])    ctrb := (constant(%0_0100 << 26) | directionRight[-(rightChannelDuty < 0)]){{/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  TERMS OF USE: MIT License///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation// files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the// Software is furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the// Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}}